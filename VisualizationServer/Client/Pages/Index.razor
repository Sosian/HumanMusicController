@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<img src="face.jpg" style="transform: rotate(@rotationValue); float: left" />

<div style="float: right; font-size: 200px">@currentHeartbeat</div>

<div> Stopwatch: @stopwatchToString</div>

<div
    style="height: 50px; width: 10px; border-style: solid; border-color: black; background: linear-gradient(to top, black 80%, white 20%);">
</div>

@code {
    private HubConnection? hubConnection;

    string rotationValue = "25deg";
    string currentHeartbeat = "";
    string stopwatchToString = "";
    System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/heartbeatHub"))
        .Build();

        hubConnection.On<int>("ReceiveHeartbeat", (heartbeat) =>
        {
            currentHeartbeat = $"{heartbeat}";

            if (rotationValue == "25deg")
                rotationValue = "-25deg";
            else
                rotationValue = "25deg";
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        stopWatch.Start();
        await StopWatch();

    }

    async Task StopWatch()
    {
        while (true)
        {
            await (Task.Delay(100));

            TimeSpan ts = stopWatch.Elapsed;
            stopwatchToString = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",
            ts.Hours, ts.Minutes, ts.Seconds,
            ts.Milliseconds / 10);
            StateHasChanged();
        }
    }
    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendHeartbeat", 5);
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}