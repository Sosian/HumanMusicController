@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<Index> Logger

<audio id="metronomeSoundPlayer" src="MetronomeSound.wav">
</audio>

<audio id="firstLevelBreakPlayer" src="firstLevelBreak.wav">
</audio>

<audio id="secondLevelBreakPlayer" src="secondLevelBreak.wav">
</audio>
      <div id="explodingProgressbarSpawner">
        @* <div class="explodingProgressbar"></div> *@
      </div>
      
<div class="row">
    <div class="column left">
        <div id="bubbleSpawner">
            @* <div class="bubble"></div> *@
        </div>
        <div id="pulseSpawner">
            @* <div class="pulse"></div> *@
        </div>
        <span
            style="color: var(--color-yellow); text-align: center; font-size: 55px; position: absolute; top: 28vh; left: 9vw; font-family: 'Brush Script MT';">@currentHeartbeat</span>
    </div>
    <div class="column middle">
        <img id="face" src="face.png"
            style="top: 28vh; left: calc(var(--statue-left-offset) + 8vw); position: absolute;" />
    </div>

    <div class="column right">
        <div>
            <div id="progressbar"
                style="position: absolute; left: var(--progressbar-left-offset); height: @(progressbarHeight)px; top: var(--progressbar-top-offset); width: var(--progressbar-width); border-radius: 25px; border-style: solid; border-color: var(--color-yellow); background: linear-gradient(to top, var(--color-yellow) @progressToString%, var(--color-background) @progressToString%);">
            </div>

            <div
                style="position: absolute; left: var(--progressbar-left-offset); width: var(--progressbar-width); top: calc(@(firstLevelProgressbar)px + var(--progressbar-top-offset)); height: 2px; background-color: var(--color-yellow);">
            </div>

            <div
                style="position: absolute; left: var(--progressbar-left-offset); width: var(--progressbar-width); top: calc(@(secondLevelProgressbar)px + var(--progressbar-top-offset)); height: 2px; background-color: var(--color-yellow);">
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;

    string currentHeartbeat = "XX";
    int progressbarHeight = 400;
    int firstLevelProgressbar = 0;
    int secondLevelProgressbar = 0;

    int progress = 0;
    double minLevelCount = 0;
    int maxLevelCount = 6000;
    string progressToString = "";

    int firstLevel = 0;
    int secondLevel = 0;

    int firstLevelPercentage = 0;
    int secondLevelPercentage = 0;
    bool firstLevelTriggered = false;
    bool secondLevelTriggered = false;

    int soundMetronomeInterval;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/heartbeatHub")).Build();

        soundMetronomeInterval = await JS.InvokeAsync<int>("setupSoundMetronome", "1500");

        double spannweite = maxLevelCount - minLevelCount;
        firstLevel = Convert.ToInt32((spannweite * 0.3) + minLevelCount);
        secondLevel = Convert.ToInt32((spannweite * 0.66) + minLevelCount);

        firstLevelPercentage = (int)(((firstLevel - minLevelCount) / spannweite) * 100);
        secondLevelPercentage = (int)(((secondLevel - minLevelCount) / spannweite) * 100);

        firstLevelProgressbar = (int)(progressbarHeight - (progressbarHeight * ((double)firstLevelPercentage / 100)));
        secondLevelProgressbar = (int)(progressbarHeight - (progressbarHeight * ((double)secondLevelPercentage / 100)));

        Console.WriteLine($"Setup: FirstLevel: {firstLevelPercentage}, SecondLevel: {secondLevelPercentage}, MaxLevel: {maxLevelCount}");

        hubConnection.On<int, double, int>("ReceiveHeartbeat", async (heartbeat, currentProgress, currentLevel) =>   
        {
            Console.WriteLine($"Received hearbeat '{heartbeat}' and Progress '{currentProgress}'");
            currentHeartbeat = $"{heartbeat}";
            StateHasChanged();

            await JS.InvokeVoidAsync("setDisplayBlockForPulse");

            int progressbarDelayMilliseconds = 1950; //Sum of bubble animation delay and animation duration
            
            #pragma warning disable CS4014 
            Task.Delay(progressbarDelayMilliseconds).ContinueWith(async (o) => {
            #pragma warning restore CS4014 
                try 
                {
                    progress = (int)(currentProgress * 100);
                    progressToString = progress.ToString();
                    await TriggerCurrentLevel(currentLevel);
                } catch (Exception ex)
                 {
                    Console.WriteLine(ex);
                }
            }).ContinueWith(t => StateHasChanged());
        });

        await hubConnection.StartAsync();
    }

    private async Task TriggerCurrentLevel (int currentLevel)
    {
        if (currentLevel == 1 && !firstLevelTriggered)
        {
            firstLevelTriggered = true;
            Console.WriteLine("firstLevelReached");
            
            await JS.InvokeVoidAsync("clearInterval", soundMetronomeInterval);
            await JS.InvokeVoidAsync("playFirstLevelBreak");
            
            
            soundMetronomeInterval = await JS.InvokeAsync<int>("setupSoundMetronome", "1000");
        }
        else if (currentLevel == 2 && !secondLevelTriggered)
        {
            secondLevelTriggered = true;
            Console.WriteLine("secondLevelReached");
            
            await JS.InvokeVoidAsync("clearInterval", soundMetronomeInterval);
            await JS.InvokeVoidAsync("playSecondLevelBreak");
            soundMetronomeInterval = await JS.InvokeAsync<int>("setupSoundMetronome", "500");
        }
        else if (currentLevel == 3)
        {
            Console.WriteLine("finaleReached");

            currentHeartbeat = "...";
            await JS.InvokeVoidAsync("clearInterval", soundMetronomeInterval);
            await JS.InvokeVoidAsync("startExplosion");
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}