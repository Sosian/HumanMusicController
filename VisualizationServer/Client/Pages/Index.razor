@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<Index> Logger

<PageTitle>Index</PageTitle>
<audio id="metronomeSoundPlayer" src="MetronomeSound.wav">
    Your browser does not support the html audio tag.
</audio>
<img id="face" src="face.jpg" style="margin: auto; display: block;" />

<div style="float: left; color: white;">
    Heartbeat: @currentHeartbeat,- <br />
    firstLevelPercentage: @firstLevelPercentage,<br />
    secondLevelPercentage: @secondLevelPercentage<br />
</div>

<div style="position: relative;">
    <div
        style="position: absolute; left: 2px; height: 100px; width: 20px; border-style: solid; border-color: black; background: linear-gradient(to top, white @progressToString%, black @progressToString%);">
    </div>


    <div
        style="position: absolute; width: 27px; top: @(100-firstLevelPercentage)px; height: 2px; background-color: white;">
    </div>

    <div
        style="position: absolute; width: 27px; top: @(100-secondLevelPercentage)px; height: 2px; background-color: white;">
    </div>


</div>



@code {
    private HubConnection? hubConnection;

    string currentHeartbeat = "";
    int progress = 0;
    double averageHeartbeat = 70;
    double minAverageHeartbeat = 70;
    int maxAverageHeartbeat = 115;
    string progressToString = "";
    string spannweiteToString = "";
    string averageHeartbeatToString = "";

    int firstLevel = 0;
    int secondLevel = 0;

    int firstLevelPercentage = 0;
    int secondLevelPercentage = 0;

    bool firstLevelReached = false;
    bool secondLevelReached = false;

    List<int> receivedHeartbeats = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/heartbeatHub")).Build();


        var soundMetronome = await JS.InvokeAsync<int>("setupSoundMetronome", "1000");
        double spannweite = maxAverageHeartbeat - minAverageHeartbeat;
        firstLevel = Convert.ToInt32((spannweite * 0.3) + minAverageHeartbeat);
        secondLevel = Convert.ToInt32((spannweite * 0.6) + minAverageHeartbeat);

        firstLevelPercentage = (int)(((firstLevel - minAverageHeartbeat) / spannweite) * 100);
        secondLevelPercentage = (int)(((secondLevel - minAverageHeartbeat) / spannweite) * 100);

        hubConnection.On<int>("ReceiveHeartbeat", (heartbeat) =>
        {
            receivedHeartbeats.Add(heartbeat);
            //Logger.LogInformation("Heartbeat: " + heartbeat);

            currentHeartbeat = $"{heartbeat}";

            spannweiteToString = spannweite.ToString();

            averageHeartbeat = (int)receivedHeartbeats.Average();
            averageHeartbeatToString = averageHeartbeat.ToString();

            progress = (int)(((averageHeartbeat - minAverageHeartbeat) / spannweite) * 100);

            //Logger.LogInformation("Progess: " + progress);
            progressToString = progress.ToString();

            if (progress >= firstLevelPercentage && !firstLevelReached)
            {
                firstLevelReached = true;
                Logger.LogInformation("BeforeClearInterval");
                var test = JS.InvokeAsync<int>("clearInterval", soundMetronome).Result;
                Logger.LogInformation("AfterClearInterval");
                soundMetronome = JS.InvokeAsync<int>("setupSoundMetronome", "500").Result;
                Logger.LogInformation("AfterSetupSoundMetronome");
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }



    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}