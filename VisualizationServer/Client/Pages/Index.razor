@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<Index> Logger

<PageTitle>Index</PageTitle>
<audio id="metronomeSoundPlayer" src="MetronomeSound.wav">
    Your browser does not support the html audio tag.
</audio>

<div class="row">
    <div class="column left">
        <div id="bubbleSpawner">
            @* <div class="bubble"></div> *@
        </div>
        <div id="pulse" class="pulse"></div>
        <span
            style="color: var(--color-yellow); text-align: center; font-size: 55px; position: absolute; top: 28vh; left: 9vw; font-family: 'Brush Script MT';">@currentHeartbeat</span>
    </div>
    <div class="column middle">
        <img id="base" src="base.png"
            style="top: 10vh; left: var(--statue-left-offset); position: absolute; max-width:90%; max-height: 90%;" />

        <div id="displayMessage">Initializing</div>

        <img id="face" src="face.png"
            style="top: 0; left: calc(var(--statue-left-offset) + 14vw); position: absolute;" />
    </div>

    <div class="column right">
        <div>
            <div
                style="position: absolute; left: var(--progressbar-left-offset); height: @(progressbarHeight)px; top: var(--progressbar-top-offset); width: var(--progressbar-width); border-radius: 25px; border-style: solid; border-color: var(--color-yellow); background: linear-gradient(to top, var(--color-yellow) @progressToString%, var(--color-background) @progressToString%);">
            </div>

            <div
                style="position: absolute; left: var(--progressbar-left-offset); width: var(--progressbar-width); top: calc(@(firstLevelProgressbar)px + var(--progressbar-top-offset)); height: 2px; background-color: var(--color-yellow);">
            </div>

            <div
                style="position: absolute; left: var(--progressbar-left-offset); width: var(--progressbar-width); top: calc(@(secondLevelProgressbar)px + var(--progressbar-top-offset)); height: 2px; background-color: var(--color-yellow);">
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;

    IEnumerable<string> displayMessages = new List<string>() { "Praise", "the", "Sun" };

    string currentHeartbeat = "XX";
    int progressbarHeight = 400;
    int firstLevelProgressbar = 0;
    int secondLevelProgressbar = 0;

    int progress = 0;
    double levelCounter = 70;
    double minLevelCount = 0;
    int maxLevelCount = 9600;
    string progressToString = "";
    string spannweiteToString = "";
    string averageHeartbeatToString = "";

    int firstLevel = 0;
    int secondLevel = 0;

    int firstLevelPercentage = 0;
    int secondLevelPercentage = 0;

    bool firstLevelReached = false;
    bool secondLevelReached = false;

    List<int> receivedHeartbeats = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/heartbeatHub")).Build();


        var soundMetronomeInterval = await JS.InvokeAsync<int>("setupSoundMetronome", "1000");
        var wordsInterval = await JS.InvokeAsync<int>("setupWords", "1000", displayMessages.First());

        double spannweite = maxLevelCount - minLevelCount;
        firstLevel = Convert.ToInt32((spannweite * 0.3) + minLevelCount);
        secondLevel = Convert.ToInt32((spannweite * 0.6) + minLevelCount);

        firstLevelPercentage = (int)(((firstLevel - minLevelCount) / spannweite) * 100);
        secondLevelPercentage = (int)(((secondLevel - minLevelCount) / spannweite) * 100);

        firstLevelProgressbar = (int)(progressbarHeight - (progressbarHeight * ((double)firstLevelPercentage / 100)));
        secondLevelProgressbar = (int)(progressbarHeight - (progressbarHeight * ((double)secondLevelPercentage / 100)));

        hubConnection.On<int>("ReceiveHeartbeat", (heartbeat) =>
        {
            receivedHeartbeats.Add(heartbeat);
            currentHeartbeat = $"{heartbeat}";

            try
            {
                var temp1 = JS.InvokeAsync<int>("setDisplayBlockForPulse").Result;
            }
            catch (Exception)
            {
                //Not sure why this throws an exception, but everything works when i just catch it
            }


            levelCounter = (int)receivedHeartbeats.Sum();
            averageHeartbeatToString = levelCounter.ToString();

            progress = (int)(((levelCounter - minLevelCount) / spannweite) * 100);

            progressToString = progress.ToString();

            if (progress >= firstLevelPercentage && !firstLevelReached)
            {
                firstLevelReached = true;
                try
                {
                    var temp2 = JS.InvokeAsync<int>("clearInterval", soundMetronomeInterval).Result;
                    var temp3 = JS.InvokeAsync<int>("clearInterval", wordsInterval).Result;
                }
                catch (Exception)
                {
                    //Not sure why this throws an exception, but everything works when i just catch it
                }

                soundMetronomeInterval = JS.InvokeAsync<int>("setupSoundMetronome", "500").Result;
                wordsInterval = JS.InvokeAsync<int>("setupWords", "1000", displayMessages.Take(2)).Result;
            }
            else if (progress >= secondLevelPercentage && !secondLevelReached)
            {
                secondLevelReached = true;
                try
                {
                    var _ = JS.InvokeAsync<int>("clearInterval", soundMetronomeInterval).Result;
                    var __ = JS.InvokeAsync<int>("clearInterval", wordsInterval).Result;
                }
                catch (Exception)
                {
                    //Not sure why this throws an exception, but it works when i just catch it
                }

                soundMetronomeInterval = JS.InvokeAsync<int>("setupSoundMetronome", "250").Result;
                wordsInterval = JS.InvokeAsync<int>("setupWords", "1000", displayMessages).Result;
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }



    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}